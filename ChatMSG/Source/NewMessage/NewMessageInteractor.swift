//
//  NewMessageInteractor.swift
//  ChatMSG
//
//  Created by Julia on 2023/04/26.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NewMessageBusinessLogic {
    func requestNewMessage(request: MakeMessage.makeNewMessage.Request)
}

protocol NewMessageDataStore {
    var receiver: String? { get set }
    var sender: String? { get set }
    var date: Date? { get set }
    var type: String? { get set }
    var writingStyle: String? { get set }
    var situation: String? { get set }
}

final class NewMessageInteractor: NewMessageBusinessLogic, NewMessageDataStore {
    
    static let shared = NewMessageInteractor()
    
    var receiver: String?
    var sender: String?
    var date: Date?
    var type: String?
    var writingStyle: String?
    var situation: String? 

    var presenter: NewMessagePresentationLogic?
    private var worker: NewMessageWorkerProtocol?
        
    init(presenter: NewMessagePresentationLogic = NewMessagePresenter(),
         worker: NewMessageWorker = NewMessageWorker()) {
        self.presenter = presenter
        self.worker = worker
    }
  
    // MARK: - fetchNewMessage
    func requestNewMessage(request: MakeMessage.makeNewMessage.Request) {
        guard let worker = worker else { return }
        Task {
            let message = try await worker.requestNewMessage(request)
            let response = MakeMessage.makeNewMessage.Response(newMessage: message)
            presenter?.presentNewMessage(response: response)
            
            // TODO: 에러 헨들링
        }
    }
    
    func makeNewMessage() -> NewMessage {
        return .init(receiver: self.receiver ?? "",
                     sender: self.sender ?? "",
                     date: self.date ?? .now,
                     type: self.type ?? "",
                     writingStyle: self.writingStyle ?? "",
                     situation: self.situation ?? "")
    }

}
