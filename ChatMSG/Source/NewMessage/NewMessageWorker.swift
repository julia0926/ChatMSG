//
//  NewMessageWorker.swift
//  ChatMSG
//
//  Created by Julia on 2023/04/26.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NewMessageWorkerProtocol {
    func requestNewMessage(_ message: MakeMessage.makeNewMessage.Request.newMessage) async throws -> String
    func saveNewMessage(_ request: MakeMessage.makeNewMessage.Request.saveMessage) async
}

final class NewMessageWorker: NewMessageWorkerProtocol {
    private var datasource: OpenAIDataSourceProtocol
    
    init(datasource: OpenAIDataSourceProtocol = OpenAIDataSource()) {
        self.datasource = datasource
    }
    
    // MARK: - Request
    func requestNewMessage(_ request: MakeMessage.makeNewMessage.Request.newMessage) async throws -> String {
        let output = translate(request)
        let result = try await datasource.getMessage(request: output)
        return result
    }
        
    func translate(_ model: MakeMessage.makeNewMessage.Request.newMessage) -> OpenAIRequest {
        return OpenAIRequest(type: removeImoji(model.type),
                             receiver: model.receiver,
                             sender: model.sender,
                             date: model.date.hangleFormat(),
                             writingStyle: model.writingStyle,
                             situation: model.situation)
    }
    
    // MARK: - Save
    func saveNewMessage(_ model: MakeMessage.makeNewMessage.Request.saveMessage) async {
        await Message.saveMessage(receiver: model.receiver,
                                  sender: model.sender,
                                  messageDate: model.date,
                                  result: model.result,
                                  type: removeImoji(model.type),
                                  imoji: getImoji(model.type))
        
    }
    
    private func removeImoji(_ type: String) -> String {
        if let splitStr: String.SubSequence = type.split(separator: " ").last {
            return String(splitStr)
        }
        return ""
    }
    
    private func getImoji(_ type: String) -> String {
        if let splitStr: String.SubSequence = type.split(separator: " ").first {
            return String(splitStr)
        }
        return ""
    }
}
