//
//  NewTypeViewController.swift
//  ChatMSG
//
//  Created by Julia on 2023/05/01.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SnapKit

final class NewTypeViewController: UIViewController {
    //    var interactor: NewTypeBusinessLogic?
        var router: (NewMessageRoutingLogic & NewMessageDataPassing)?
    
    // MARK: - Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        self.setup()
    }
    
    // MARK: - Setup
    
    private func setup() {
        let viewController = self
        //        let interactor = NewMessageInteractor()
        //        let presenter = NewMessagePresenter()
                let router = NewMessageRouter()
        //        viewController.interactor = interactor
                viewController.router = router
        //        interactor.presenter = presenter
        //        presenter.viewController = viewController
//                router.viewController = viewController
//                router.dataStore = interactor
    }
    
    // MARK: -  UIComponent
    private let typeTextField: UnderLineView =  {
        let view = UnderLineView()
        view.configure(title: "어떤 종류의 메세지인가요?")
        return view
    }()
    
    private let nextButton: UIButton = {
        let btn = UIButton()
        btn.setTitle("NEXT", for: .normal)
        btn.titleLabel?.font = .systemFont(ofSize: 16, weight: .semibold)
        btn.setTitleColor(.black, for: .normal)
        btn.layer.borderColor = UIColor.orange.cgColor
        btn.layer.borderWidth = 2
        btn.layer.cornerRadius = 10
        return btn
    }()
    
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        doSomething()
        self.view.backgroundColor = .systemBackground
        self.setUpLayout()
        self.settingNextButton()
        self.typeTextField.delegate = self
    }
    
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        self.view.endEditing(true)
    }
    
    private func settingNextButton() {
        self.nextButton.addTarget(self, action: #selector(didTapNextButton(_:)), for: .touchUpInside)
    }
    
    @objc private func didTapNextButton(_ sender: UIButton) {
        // TODO: 다음페이지 라우팅
    }
    
    private func setUpLayout() {
        [self.typeTextField, self.nextButton].forEach {
            self.view.addSubview($0)
        }
        
        self.typeTextField.snp.makeConstraints { make in
            make.top.equalTo(self.view.safeAreaLayoutGuide.snp.top).inset(60)
            make.leading.trailing.equalToSuperview().inset(30)
            make.height.equalTo(140)
        }
        
        self.nextButton.snp.makeConstraints { make in
            make.top.equalTo(self.typeTextField.snp.bottom).offset(20)
            make.trailing.equalTo(self.typeTextField.snp.trailing)
            make.width.equalTo(70)
            make.height.equalTo(35)
        }
 
    
    }
    
    // VIP Cycle Start
    func doSomething() {
//        let request = NewType.Something.Request()
//        interactor?.doSomething(request: request)
    }
    
    // MARK: - Display Logic
  
//    func displaySomething(viewModel: NewType.Something.ViewModel) {
//        //nameTextField.text = viewModel.name
//    }
    
}

extension NewTypeViewController: UnderLineViewDelegate {
    func fetchTextFieldText(text: String) {
        print(text)
    }
    
    func updateButtonState(flag: Bool) {
        let buttonTitleColor: UIColor = flag ? .white : .black
        let buttonBackgroundColor: UIColor = flag ? .orange : .clear
        self.nextButton.setTitleColor(buttonTitleColor, for: .normal)
        self.nextButton.backgroundColor = buttonBackgroundColor
        self.nextButton.isEnabled = flag
    }
    
}
