//
//  ResultViewController.swift
//  ChatMSG
//
//  Created by Julia on 2023/04/26.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

@MainActor
protocol NewMessageDisplayLogic: AnyObject {
    func displayNewMessage(viewModel: MakeMessage.makeNewMessage.ViewModel)
    func displayError(error: MakeMessage.makeNewMessage.ViewModel.Error)
}

final class ResultViewController: UIViewController, NewMessageDisplayLogic {

    var interactor: NewMessageBusinessLogic?
    var router: (NewMessageRoutingLogic & NewMessageDataPassing)?
    
    private var componentIsHidden: Bool = true {
        didSet {
            self.indicatorView.isHidden = !componentIsHidden
            self.indicatorLabel.isHidden = !componentIsHidden
            self.titleLabel.isHidden = componentIsHidden
            self.messageTextView.isHidden = componentIsHidden
            self.copyButton.isHidden = componentIsHidden
            self.shareButton.isHidden = componentIsHidden
            self.retryButton.isHidden = componentIsHidden
            self.saveAndMainButton.isHidden = componentIsHidden
        }
    }
    
    // MARK: - Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        self.setup()
    }
    
    // MARK: - Setup
    
    private func setup() {
        let viewController = self
        let interactor = NewMessageInteractor.shared
        let presenter = NewMessagePresenter()
        let router = NewMessageRouter.shared
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.resultVC = viewController
        router.dataStore = interactor
    }
    
    // MARK: -  UIComponent

    private let indicatorView: UIActivityIndicatorView = {
        let indicator = UIActivityIndicatorView()
        indicator.style = .large
        indicator.color = .darkGray
        indicator.isHidden = true
        indicator.hidesWhenStopped = true
        return indicator
    }()
    
    private let indicatorLabel: UILabel = {
        let view = UILabel()
        view.textColor = .darkGray
        view.font = .systemFont(ofSize: 15, weight: .semibold)
        view.numberOfLines = 0
        view.text = "ü§ñ Chat GPTÍ∞Ä Ïó¥Ïã¨Ìûà \n Î©îÏÑ∏ÏßÄÎ•º ÎßåÎì§Í≥† ÏûàÏñ¥Ïöî! \n Ï°∞Í∏àÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî..üèÉüèª‚Äç‚ôÄÔ∏èüèÉüèª"
        view.textAlignment = .center
        return view
    }()
    
    private let indicatorStackView: UIStackView = {
        let view = UIStackView()
        view.axis = .vertical
        view.spacing = 7
        view.distribution = .fill
        return view
    }()
    
    private let titleLabel: UILabel = {
        let view = UILabel()
        view.textColor = .darkGray
        view.font = .systemFont(ofSize: 22, weight: .bold)
        view.text = "üéâ Î©îÏÑ∏ÏßÄÍ∞Ä ÏôÑÏÑ±ÎêêÏñ¥Ïöî!"
        return view
    }()

    private let messageTextView: UITextView = {
        let view = UITextView()
        view.font = .systemFont(ofSize: 15, weight: .medium)
        view.contentInset = .init(top: 10, left: 10, bottom: 10, right: 10)
        view.layer.cornerRadius = 15
        view.layer.borderWidth = 2
        view.layer.borderColor = UIColor.orange.cgColor
        return view
    }()
    
    private let copyButton: UIButton = {
        let btn = UIButton()
        btn.setImage(UIImage(systemName: "doc.on.doc.fill"), for: .normal)
        btn.tintColor = .lightGray
        return btn
    }()
    
    private let shareButton: UIButton = {
        let btn = UIButton()
        btn.setTitle("üîó Í≥µÏú†", for: .normal)
        btn.setTitleColor(.darkGray, for: .normal)
        btn.titleLabel?.font = .systemFont(ofSize: 13, weight: .semibold)
        btn.layer.cornerRadius = 20
        btn.layer.backgroundColor = UIColor.systemGray6.cgColor
        btn.clipsToBounds = true
        return btn
    }()
    
    private let retryButton: UIButton = {
        let btn = UIButton()
        btn.setTitle("‚ôªÔ∏è Îã§Ïãú ÎßåÎì§Í∏∞", for: .normal)
        btn.titleLabel?.font = .systemFont(ofSize: 13, weight: .semibold)
        btn.setTitleColor(.darkGray, for: .normal)
        btn.layer.cornerRadius = 20
        btn.layer.backgroundColor = UIColor.systemGray6.cgColor
        btn.clipsToBounds = true
        return btn
    }()
    
    private let saveAndMainButton: UIButton = {
        let btn = UIButton()
        btn.setTitle("Ï†ÄÏû•ÌïòÍ≥† Î©îÏù∏Ïù¥Îèô", for: .normal)
        btn.titleLabel?.font = .systemFont(ofSize: 16, weight: .bold)
        btn.setTitleColor(.white, for: .normal)
        btn.layer.cornerRadius = 20
        btn.layer.backgroundColor = UIColor.orange.cgColor
        return btn
    }()
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.backgroundColor = .systemBackground
        self.view.bringSubviewToFront(self.indicatorStackView)
        self.setUpLayout()
        self.requestMessage()
        self.configureButton()
    }
    
    private func configureButton() {
        self.copyButton.addTarget(self, action: #selector(tappedCopyButton), for: .touchUpInside)
        self.shareButton.addTarget(self, action: #selector(tappedShareButton), for: .touchUpInside)
        self.retryButton.addTarget(self, action: #selector(tappedRetryButton), for: .touchUpInside)
        self.saveAndMainButton.addTarget(self, action: #selector(tappedSaveAndMainButton), for: .touchUpInside)
    }
    
    @objc private func tappedCopyButton() {
        guard let text = messageTextView.text else { return }
        UIPasteboard.general.string = text
        self.showToast("Î©îÏÑ∏ÏßÄÎ•º Î≥µÏÇ¨ÌñàÏñ¥Ïöî!", withDuration: 2.0, delay: 1.5)
    }
    
    @objc private func tappedShareButton() {
        guard let text = messageTextView.text else { return }
        let item: [String] = ["\(text)"]
        let vc = UIActivityViewController(activityItems: item, applicationActivities: nil)
        present(vc, animated: true)
    }
    
    @objc private func tappedRetryButton() {
        self.requestMessage()
    }
    
    @objc private func tappedSaveAndMainButton() {
        self.navigationController?.popToRootViewController(animated: true)
        // TODO: CoreDataÏóê Ï†ÄÏû•ÌïòÍ∏∞
    }
    
    // VIP Cycle Start
    func requestMessage() {
        self.componentIsHidden = true
        self.indicatorView.startAnimating()
        self.interactor?.requestNewMessage()
    }
    
    // MARK: - Display Logic
  
    func displayNewMessage(viewModel: MakeMessage.makeNewMessage.ViewModel) {
        print(viewModel)
        self.componentIsHidden = false
        self.messageTextView.text = viewModel.displayedMessage
    }
    
    func displayError(error: MakeMessage.makeNewMessage.ViewModel.Error) {
        let alert = UIAlertController(title: "\(error.message)", message: "", preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "OK", style: UIAlertAction.Style.default, handler: nil))
        self.present(alert, animated: true, completion: nil)
    }
    
}

extension ResultViewController {
    private func setUpLayout() {
        [self.indicatorView, self.indicatorLabel].forEach {
            self.indicatorStackView.addArrangedSubview($0)
        }
        
        [self.indicatorStackView, self.titleLabel, self.messageTextView, self.copyButton, self.shareButton, self.retryButton, self.saveAndMainButton].forEach {
            self.view.addSubview($0)
        }
        
        self.indicatorStackView.snp.makeConstraints { make in
            make.centerX.centerY.equalToSuperview()
            make.width.height.equalTo(200)
        }
        
        self.titleLabel.snp.makeConstraints { make in
            make.top.equalTo(self.view.safeAreaLayoutGuide.snp.top).offset(20)
            make.leading.trailing.equalToSuperview().inset(30)
        }

        
        self.messageTextView.snp.makeConstraints { make in
            make.top.equalTo(self.titleLabel.snp.bottom).offset(30)
            make.leading.trailing.equalToSuperview().inset(30)
            make.height.equalTo(370)
        }
        
        self.copyButton.snp.makeConstraints { make in
            make.top.equalTo(self.messageTextView.snp.top).inset(10)
            make.trailing.equalTo(self.messageTextView.snp.trailing).inset(10)
            make.height.equalTo(30)
        }
        
        self.shareButton.snp.makeConstraints { make in
            make.top.equalTo(self.messageTextView.snp.bottom).offset(30)
            make.centerX.equalToSuperview().offset(-80)
            make.width.equalTo(90)
            make.height.equalTo(35)
        }
        
        self.retryButton.snp.makeConstraints { make in
            make.top.equalTo(self.messageTextView.snp.bottom).offset(30)
            make.centerX.equalToSuperview().offset(80)
            make.width.equalTo(120)
            make.height.equalTo(35)
        }
        
        self.saveAndMainButton.snp.makeConstraints { make in
            make.top.equalTo(self.shareButton.snp.bottom).offset(20)
            make.centerX.equalToSuperview()
            make.width.equalTo(160)
            make.height.equalTo(40)
        }
    }
    
    private func showToast(_ message : String, withDuration: Double, delay: Double) {
        let toastLabel = UILabel(frame: CGRect(x: self.view.frame.size.width/2 - 75, y: self.view.frame.size.height-100, width: 160, height: 40))
        toastLabel.backgroundColor = UIColor.systemBlue
        toastLabel.textColor = UIColor.white
        toastLabel.font = UIFont.systemFont(ofSize: 13.0, weight: .semibold)
        toastLabel.textAlignment = .center
        toastLabel.text = message
        toastLabel.alpha = 1.0
        toastLabel.layer.cornerRadius = 16
        toastLabel.clipsToBounds  =  true
            
        self.view.addSubview(toastLabel)
            
        UIView.animate(withDuration: withDuration, delay: delay, options: .curveEaseOut, animations: {
            toastLabel.alpha = 0.0
        }, completion: {(isCompleted) in
            toastLabel.removeFromSuperview()
        })
    }
}
